# Add Zeungine library
add_library(zeungine ${ZG_LIBRARY_TYPE} ${ZG_SOURCES})
target_include_directories(zeungine PUBLIC ${ZG_SRC_INCLUDE})
if(WIN32)
set(ZG_ACTUAL_INC_INSTALL_PREFIX "${ZG_WIN_INSTALL_PREFIX}/${ZG_INC_INSTALL_PREFIX}")
else()
set(ZG_ACTUAL_INC_INSTALL_PREFIX "${ZG_INC_INSTALL_PREFIX}")
endif()
message(STATUS "ZG_ACTUAL_INC_INSTALL_PREFIX: ${ZG_ACTUAL_INC_INSTALL_PREFIX}")
target_include_directories(zeungine PUBLIC ${ZG_ACTUAL_INC_INSTALL_PREFIX})
# Link libraries
if(BUILD_GL)
    if(WIN32)
        find_package(OpenGL REQUIRED)
        target_link_libraries(zeungine OpenGL::GL)
    elseif(LINUX)
        target_link_libraries(zeungine GL)
    endif()
endif()
# target_link_libraries(zeungine freetype)
# target_link_libraries(zeungine bvh)
if(LINUX)
    if(USE_X11)
        target_link_libraries(zeungine X11 Xrandr Xext Xfixes xkbcommon Xrender)
    endif()
    if(USE_XCB OR USE_X11)
        target_link_libraries(zeungine xcb xkbcommon xcb-util xcb-keysyms xcb-xfixes X11 Xrandr Xext Xfixes xkbcommon Xrender)
    endif()
    if(USE_WAYLAND)
        target_link_libraries(zeungine wayland-client)
    endif()
elseif(MACOS)
    target_link_libraries(zeungine "-framework Cocoa" "-framework QuartzCore" "-framework Metal")
endif()
if(BUILD_GL)
    find_package(OpenGL REQUIRED)
    target_link_libraries(zeungine ${OPENGL_LIBRARY})
endif()
if(BUILD_VULKAN)
    find_package(Vulkan REQUIRED)
    include_directories(${Vulkan_INCLUDE_DIRS})
endif()

target_link_libraries(zeungine shaderc glslang SPIRV-Tools-shared)

target_link_libraries(zeungine avcodec avdevice avfilter avformat avutil swresample swscale)

target_link_libraries(zeungine lunasvg)

target_link_libraries(zeungine freetype)

target_link_libraries(zeungine vk_device vk_wsi vk_system vk_pipeline)

target_link_libraries(zeungine marl)
# target_link_libraries(zeungine lunasvg::lunasvg)
