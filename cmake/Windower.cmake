# Determine windower
if(LINUX)
    find_package(PkgConfig REQUIRED)
    pkg_check_modules(XCB xcb)
    find_package(X11)
    find_package(Wayland)
    option(USE_X11 "Use X11 as a windower" ${X11_FOUND})
    option(USE_XCB "Use XCB as a windower" ${XCB_FOUND})
    option(USE_WAYLAND "Use Wayland as a windower" ${Wayland_FOUND})
elseif(WINDOWS)
    option(USE_WIN32 "Use Windows as a windower" ON)
elseif(MACOS)
    option(USE_MACOS "Use Mac as a windower" ON)
endif()
if(BUILD_VULKAN)
    message(STATUS "Compiling with Vulkan backend")
endif()
if(BUILD_GL)
    message(STATUS "Compiling with OpenGL backend")
    add_definitions(-DUSE_GL)
endif()
if(BUILD_EGL)
    message(STATUS "Compiling with EGL backend")
    add_definitions(-DUSE_EGL)
endif()
# Windowing 'USE_X's
if(LINUX)
    if(USE_XCB)
        message(STATUS "Compiling with XCB windowing backend")
        add_definitions(-DUSE_XCB)
        if(NOT USE_XCB)
            set(USE_XCB ON)
        endif()
    endif()
    if(USE_X11)
        message(STATUS "Compiling with X11 windowing backend")
        add_definitions(-DUSE_X11)
        if(NOT USE_X11)
            set(USE_X11 ON)
        endif()
    endif()
    if(USE_WAYLAND)
        message(STATUS "Compiling with Wayland windowing backend")
        add_definitions(-DUSE_WAYLAND)
        if(NOT USE_WAYLAND)
            set(USE_WAYLAND ON)
        endif()
    endif()
elseif(WINDOWS)
    message(STATUS "Compiling with WIN32 windowing backend")
    if(NOT USE_WIN32)
        set(USE_WIN32 ON)
    endif()
    add_definitions(-DUSE_WIN32)
elseif(MACOS)
    message(STATUS "Compiling with MacOS windowing backend")
    if(NOT USE_MACOS)
        set(USE_MACOS ON)
    endif()
    add_definitions(-DUSE_MACOS)
endif()