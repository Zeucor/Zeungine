message(STATUS "Build type is ${CMAKE_BUILD_TYPE}")

# Determine platform and set defines
if("${CMAKE_SYSTEM_NAME}" MATCHES "Linux")
    set(LINUX ON)
    set(ZG_LIB_PREFIX "lib")
    set(SHARED_ZG_LIB_SUFFIX ".so")
    set(STATIC_ZG_LIB_SUFFIX ".a")
    if(ZG_INSTALL)
        file(READ "/etc/os-release" OS_RELEASE)
        string(REGEX MATCH "Debian|Ubuntu|Fedora" DIST ${OS_RELEASE})
        if(DIST STREQUAL "Debian" OR
            DIST STREQUAL "Ubuntu")
            set(DEB true)
        elseif(DIST STREQUAL "Fedora")
            set(RPM true)
        else()
            message(FATAL_ERROR ">>>> Found unknown distribution <<<<")
        endif()
    endif()
elseif("${CMAKE_SYSTEM_NAME}" MATCHES "Darwin")
    set(MACOS ON)
    add_definitions(-DMACOS)
    set(ZG_LIB_PREFIX "lib")
    set(SHARED_ZG_LIB_SUFFIX ".dylib")
    set(STATIC_ZG_LIB_SUFFIX ".a")
elseif(WIN32)
    set(WINDOWS ON)
    set(ZG_LIB_PREFIX "")
    set(SHARED_ZG_LIB_SUFFIX ".dll")
    set(STATIC_ZG_LIB_SUFFIX ".lib")
endif()

# Set library directory
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Debug)
endif()
if(("${CMAKE_BUILD_TYPE}" MATCHES "Release") OR ("${CMAKE_BUILD_TYPE}" MATCHES "MinSizeRel"))
    set(RELEASE_OR_DEBUG "Release")
    set(BUILD_POSTFIX "")
    if(WINDOWS)
        set(C_RUNTIME "MT")
    endif()
elseif(("${CMAKE_BUILD_TYPE}" MATCHES "Debug") OR ("${CMAKE_BUILD_TYPE}" MATCHES "RelWithDebInfo"))
    set(RELEASE_OR_DEBUG "Debug")
    set(BUILD_POSTFIX "-debug")
    if(WINDOWS)
        set(C_RUNTIME "MTd")
    endif()
endif()

# Add build flags
if(LINUX OR MACOS)
    if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
    endif()
	set(LD_CONF_FILE "/etc/ld.so.conf.d/zg${CMAKE_BUILD_TYPE}.conf")
elseif(WINDOWS)
#     set(CMAKE_CXX_FLAGS "/${C_RUNTIME} ${CMAKE_CXX_FLAGS} /wd4068")
endif()

if(LINUX OR MACOS)
    set(BUILD_SHARED_LIBS OFF)
else()
endif()

# setup target helper
function(zg_setup_target
	TARGET_NAME
	LIBRARY_TYPE
	LIBRARY_DIR
	LIBRARY_PREFIX LIBRARY_NAME IMPLIB_NAME LIBRARY_SUFFIX)
	add_library(${TARGET_NAME} ${LIBRARY_TYPE} IMPORTED)
	if(WIN32)
		if(${LIBRARY_TYPE} STREQUAL "STATIC")
			set(LIBRARY_LOCATION "${LIBRARY_DIR}/${LIBRARY_PREFIX}${LIBRARY_NAME}${LIBRARY_SUFFIX}")
		elseif(${LIBRARY_TYPE} STREQUAL "SHARED")
			set(LIBRARY_LOCATION "${LIBRARY_DIR}/${LIBRARY_NAME}.dll")
			set(IMPLIB_LOCATION "${LIBRARY_DIR}/${IMPLIB_NAME}.lib")
			set_target_properties(${TARGET_NAME} PROPERTIES IMPORTED_IMPLIB ${IMPLIB_LOCATION})
		endif()
	else()
		set(LIBRARY_LOCATION "${LIBRARY_DIR}/${LIBRARY_PREFIX}${LIBRARY_NAME}${LIBRARY_SUFFIX}")
	endif()
    message(STATUS "LIBRARY_LOCATION: ${LIBRARY_LOCATION}")
    message(STATUS "IMPLIB_LOCATION: ${IMPLIB_LOCATION}")
    set(LAST_LIBRARY_LOCATION ${LIBRARY_LOCATION} PARENT_SCOPE)
    set(LAST_TARGET_NAME ${TARGET_NAME} PARENT_SCOPE)
    set(ZG_LIBRARIES ${ZG_LIBRARIES} ${TARGET_NAME} PARENT_SCOPE)
    set(FILE_PATH "/path/to/file_or_directory")
    if(EXISTS "${LIBRARY_LOCATION}")
        set(LIBRARY_EXISTS "exists")
    else()
        set(LIBRARY_EXISTS "does not exist")
    endif()
    message(STATUS "Setting^up ${LIBRARY_TYPE} target ${LIBRARY_NAME} located at \"${LIBRARY_LOCATION}\" which ${LIBRARY_EXISTS}")
	set_target_properties(${TARGET_NAME} PROPERTIES IMPORTED_LOCATION ${LIBRARY_LOCATION})
endfunction()
# Library type, Static if Windows, otherwise Shared
if(WIN32)
    set(ZG_LIBRARY_TYPE STATIC)
else()
    set(ZG_LIBRARY_TYPE SHARED)
endif()