find_package(PkgConfig REQUIRED)
include(CTest)
enable_testing()
message(STATUS "Build type is ${CMAKE_BUILD_TYPE}")
# Set library directory
if(("${CMAKE_BUILD_TYPE}" MATCHES "Release") OR ("${CMAKE_BUILD_TYPE}" MATCHES "MinSizeRel"))
    set(RELEASE_OR_DEBUG "Release")
    set(BUILD_POSTFIX "")
elseif(("${CMAKE_BUILD_TYPE}" MATCHES "Debug") OR ("${CMAKE_BUILD_TYPE}" MATCHES "RelWithDebInfo"))
    set(RELEASE_OR_DEBUG "Debug")
    set(BUILD_POSTFIX "-debug")
endif()
set(ZG_LIB_DIR "${CMAKE_SOURCE_DIR}/lib/${CMAKE_SYSTEM_NAME}/${CMAKE_SYSTEM_PROCESSOR}/${RELEASE_OR_DEBUG}")
message(STATUS "ZG_LIB_DIR: ${ZG_LIB_DIR}")

# Determine platform and set defines
if(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
    set(LINUX ON)
    set(LIB_SUFFIX ".so")
    if(ZG_INSTALL)
        file(READ "/etc/os-release" OS_RELEASE)
        string(REGEX MATCH "Debian|Ubuntu|Fedora" DIST ${OS_RELEASE})
        if(DIST STREQUAL "Debian" OR
            DIST STREQUAL "Ubuntu")
            set(DEB true)
        elseif(DIST STREQUAL "Fedora")
            set(RPM true)
        else()
            message(FATAL_ERROR ">>>> Found unknown distribution <<<<")
        endif()
    endif()
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
    set(MACOS ON)
    set(LIB_SUFFIX ".dylib")
elseif(WIN32)
    set(WINDOWS ON)
    set(LIB_SUFFIX ".dll")
endif()

# Add build flags
if(LINUX OR MACOS)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -w -fPIC")
    if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
    endif()
    set(BUILD_SHARED_LIBS ON)
elseif(WINDOWS)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4068")
endif()
